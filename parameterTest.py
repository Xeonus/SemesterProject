from math import sqrt
from ini.trakem2.display import Display
from jarray import array
import sys
sys.path.append("/Users/berthola/Desktop/Fiji Scripts")
from matrixoperator import Matrix
from javax.media.j3d import Transform3D
from javax.vecmath import Point3d
from ij.io import FileSaver
from profilingFixedCoordinates import getDendriticProfiles
from profilingFixedCoordinates import getNodeCoordinates
from machine_ import featureVector, createClassifier, trainClassifier, classify
from featureLoader_ import featureList, tester

"""
container={}
condition=[]

for nt in range(50, 325, 25):
  result=[]
  for i in range(10, 305, 5):
    condition= float(tester(nt, i))
    result.append(condition)
  container[nt]=result
print container
"""
container={300: [0.1852, 0.2963, 0.2593, 0.1852, 0.4074, 0.2963, 0.4074, 0.4074, 
0.3704, 0.4444, 0.2963, 0.2963, 0.3333, 0.4074, 0.3333, 0.3333, 0.4444, 0.3704, 
0.4444, 0.3704, 0.3704, 0.4074, 0.3704, 0.3333, 0.4444, 0.4074, 0.3333, 0.4074, 
0.3704, 0.4074, 0.3704, 0.4074, 0.4074, 0.4444, 0.4444, 0.3333, 0.3704, 0.4074, 
0.4074, 0.4074, 0.4815, 0.4815, 0.4074, 0.4444, 0.3704, 0.4815, 0.4815, 0.4444, 
0.3704, 0.4444, 0.4815, 0.4444, 0.4815, 0.4444, 0.4815, 0.4074, 0.4444, 0.4074, 0.5185], 
150: [0.1852, 0.3333, 0.2593, 0.2222, 0.4074, 0.3333, 0.4444, 0.4074, 0.4074, 0.4074, 0.2963, 
0.2963, 0.4074, 0.2963, 0.2963, 0.3704, 0.4074, 0.4074, 0.4444, 0.3333, 0.2963, 0.3704, 0.3704, 
0.3333, 0.4444, 0.4815, 0.4074, 0.4444, 0.4074, 0.4074, 0.4074, 0.4074, 0.4444, 0.4815, 0.4444, 
0.4074, 0.3704, 0.4074, 0.4074, 0.4074, 0.4444, 0.4815, 0.4074, 0.4815, 0.3704, 0.4815, 0.4815, 
0.4444, 0.3333, 0.4444, 0.4815, 0.4074, 0.4815, 0.4815, 0.4815, 0.4444, 0.4815, 0.4444, 0.4815], 
75: [0.1852, 0.2963, 0.2963, 0.2222, 0.3333, 0.3333, 0.4074, 0.3333, 0.3704, 0.4074, 0.2963, 0.2963, 
0.3704, 0.3333, 0.3333, 0.3333, 0.3333, 0.4074, 0.4444, 0.4074, 0.3704, 0.4074, 0.3333, 0.2963, 0.4444, 
0.4444, 0.4074, 0.4444, 0.3704, 0.3704, 0.3704, 0.3704, 0.3704, 0.4444, 0.4074, 0.4074, 0.4074, 0.3333, 
0.4074, 0.4074, 0.3704, 0.4444, 0.3704, 0.4815, 0.5185, 0.4444, 0.4444, 0.4444, 0.4074, 0.4074, 0.4444, 
0.4815, 0.4444, 0.4815, 0.4815, 0.5185, 0.4815, 0.5185, 0.4444], 125: [0.1852, 0.2593, 0.2593, 0.2593, 
0.3704, 0.3333, 0.4444, 0.4074, 0.4444, 0.4074, 0.3704, 0.2963, 0.3704, 0.4074, 0.3333, 0.3704, 0.4074, 
0.4074, 0.4444, 0.3333, 0.3704, 0.4074, 0.3704, 0.4074, 0.4444, 0.4444, 0.4074, 0.4074, 0.3704, 0.4074, 
0.3704, 0.3704, 0.4444, 0.4815, 0.4815, 0.4074, 0.3704, 0.4444, 0.4074, 0.3704, 0.4444, 0.4444, 0.4074, 
0.4444, 0.4074, 0.4815, 0.4815, 0.4444, 0.3704, 0.4444, 0.4815, 0.4074, 0.4815, 0.4444, 0.4815, 0.4074, 
0.4444, 0.4815, 0.4815], 200: [0.1852, 0.2963, 0.2593, 0.1852, 0.4074, 0.3704, 0.4444, 0.4074, 0.4074, 
0.4074, 0.2963, 0.2963, 0.2963, 0.3704, 0.2963, 0.3333, 0.4074, 0.4074, 0.4815, 0.3704, 0.3333, 0.3704, 
0.4074, 0.3704, 0.4074, 0.3704, 0.3333, 0.4444, 0.3333, 0.3704, 0.4074, 0.4074, 0.3704, 0.4074, 0.4444, 
0.4074, 0.3333, 0.3704, 0.4444, 0.4074, 0.4444, 0.4444, 0.4444, 0.4074, 0.3704, 0.4815, 0.4815, 0.4444, 
0.3333, 0.4444, 0.4815, 0.4074, 0.4815, 0.4444, 0.4444, 0.4074, 0.4444, 0.4074, 0.4815], 
225: [0.1852, 0.2963, 0.2593, 0.1852, 0.3704, 0.3704, 0.4444, 0.4074, 0.4074, 0.4444, 0.2963, 0.3333, 
0.2963, 0.3704, 0.2963, 0.3333, 0.4074, 0.3704, 0.4815, 0.3704, 0.2963, 0.3704, 0.3704, 0.3333, 0.4074, 
0.3704, 0.3333, 0.4444, 0.3333, 0.3704, 0.4074, 0.4074, 0.4074, 0.4444, 0.4444, 0.3704, 0.3333, 0.4074, 
0.4815, 0.4074, 0.4074, 0.4444, 0.4444, 0.4444, 0.3704, 0.4815, 0.4815, 0.4074, 0.3333, 0.4444, 0.4815, 
0.4074, 0.4444, 0.4444, 0.4074, 0.4074, 0.4815, 0.4074, 0.4815], 50: [0.2593, 0.2963, 0.3333, 0.2593, 0.3333, 
0.2593, 0.4074, 0.4074, 0.3704, 0.3704, 0.2963, 0.3333, 0.3333, 0.3333, 0.3333, 0.3704, 0.4074, 0.3704, 0.3333, 
0.3704, 0.3704, 0.3704, 0.3333, 0.3333, 0.3704, 0.3333, 0.3704, 0.3333, 0.4074, 0.4074, 0.3704, 0.3333, 0.3704, 
0.4074, 0.4444, 0.3333, 0.3333, 0.3704, 0.3333, 0.4074, 0.4444, 0.3704, 0.4074, 0.4074, 0.3704, 0.3704, 0.3704, 
0.2963, 0.3704, 0.3333, 0.3704, 0.3333, 0.4074, 0.2963, 0.3704, 0.3333, 0.4074, 0.3704, 0.4074], 
250: [0.1852, 0.2963, 0.2593, 0.1852, 0.4074, 0.3704, 0.4444, 0.4074, 0.4074, 0.4444, 0.2963, 0.2963, 0.2963, 
0.4074, 0.2963, 0.3333, 0.4444, 0.3704, 0.4444, 0.4074, 0.2963, 0.4074, 0.4074, 0.3333, 0.4444, 0.4074, 0.3333, 
0.4444, 0.3333, 0.3704, 0.3704, 0.4074, 0.4074, 0.4444, 0.4444, 0.3333, 0.3704, 0.4074, 0.4815, 0.4444, 0.4444, 
0.4444, 0.4074, 0.4074, 0.3704, 0.4815, 0.4815, 0.4074, 0.3333, 0.4444, 0.4815, 0.4074, 0.4074, 0.4444, 0.4444, 
0.4444, 0.4444, 0.4074, 0.5185], 175: [0.1852, 0.2963, 0.2593, 0.2222, 0.3333, 0.3704, 0.4074, 0.4074, 0.4074, 
0.4074, 0.3333, 0.2963, 0.3333, 0.3333, 0.2963, 0.3333, 0.4074, 0.3704, 0.4444, 0.3333, 0.3333, 0.3704, 0.3704, 
0.3333, 0.4074, 0.4444, 0.3704, 0.4444, 0.3704, 0.3704, 0.4074, 0.4444, 0.3704, 0.4444, 0.4444, 0.3704, 0.3333, 
0.3704, 0.4815, 0.4444, 0.4444, 0.4444, 0.4444, 0.4074, 0.3704, 0.4815, 0.4815, 0.4444, 0.3704, 0.4074, 0.4815, 
0.4074, 0.4444, 0.4815, 0.4815, 0.4074, 0.4815, 0.4444, 0.4815], 275: [0.1852, 0.2963, 0.2593, 0.1852, 0.4074, 
0.3333, 0.4444, 0.4074, 0.3704, 0.4444, 0.2963, 0.2963, 0.2963, 0.4074, 0.2963, 0.3333, 0.4074, 0.3704, 0.4444, 
0.4074, 0.2963, 0.4074, 0.3704, 0.3333, 0.4444, 0.4074, 0.3333, 0.4444, 0.3333, 0.3704, 0.4074, 0.4074, 0.4074, 
0.4444, 0.4444, 0.3333, 0.3704, 0.4074, 0.4815, 0.4074, 0.4815, 0.4444, 0.3704, 0.4815, 0.3704, 0.4815, 0.4815, 
0.4444, 0.3704, 0.4444, 0.4815, 0.4074, 0.4074, 0.4444, 0.4815, 0.4444, 0.4444, 0.4444, 0.5185], 
100: [0.1852, 0.2963, 0.2963, 0.2222, 0.3704, 0.3333, 0.4444, 0.4444, 0.4444, 0.4074, 0.3333, 0.2963, 
0.3704, 0.4074, 0.4074, 0.4074, 0.3333, 0.3704, 0.4074, 0.4074, 0.4074, 0.4444, 0.3704, 0.3333, 0.4444, 
0.4444, 0.4074, 0.4074, 0.4074, 0.4074, 0.3704, 0.3704, 0.4074, 0.4074, 0.4074, 0.4074, 0.3704, 0.4074, 
0.4074, 0.4074, 0.4444, 0.4444, 0.3704, 0.4444, 0.4074, 0.4815, 0.4444, 0.4444, 0.3704, 0.4074, 0.4444, 
0.4074, 0.4444, 0.4444, 0.4444, 0.4074, 0.4444, 0.4815, 0.4074]}

mins=[]
iterations=[]
binvector=[]
for i in range(50, 325, 25):
    for j in range(0, 59):  
      minimum=min(container[i])
      mins.append(minimum)
      position=0
      binvector=container[i]
      if float(binvector[j]) == min(binvector[j]):
        position=j
    iterations.append(position)
      
print mins
print iterations



